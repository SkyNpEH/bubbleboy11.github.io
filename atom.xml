<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>外心人D的博客</title>
  
  
  <link href="https://bubbleboy11.github.io/atom.xml" rel="self"/>
  
  <link href="https://bubbleboy11.github.io/"/>
  <updated>2021-07-23T16:18:23.551Z</updated>
  <id>https://bubbleboy11.github.io/</id>
  
  <author>
    <name>外心人D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go的http</title>
    <link href="https://bubbleboy11.github.io/2021/07/20/go-de-http/"/>
    <id>https://bubbleboy11.github.io/2021/07/20/go-de-http/</id>
    <published>2021-07-19T16:21:41.000Z</published>
    <updated>2021-07-23T16:18:23.551Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Web是基于http协议的一个服务，&lt;br&gt;Go语言里面提供了一个完善的net/http包，通过http包可以很方便的搭建起来一个可以运行的Web服务。&lt;br&gt;同时使用这个包能很简单地对Web的路由，静态文件，模版，cookie等数据进行设置和操作。&lt;/p&gt;
&lt;h4</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go包管理</title>
    <link href="https://bubbleboy11.github.io/2021/07/20/go-bao-guan-li/"/>
    <id>https://bubbleboy11.github.io/2021/07/20/go-bao-guan-li/</id>
    <published>2021-07-19T16:21:41.000Z</published>
    <updated>2021-07-15T15:22:21.347Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;包管理 1.12之前 go的没有包管理 python java maven go modules&lt;/p&gt;
&lt;p&gt;包package：工程项目当中根据不同工作模块建立的不同的文件夹&lt;/p&gt;
&lt;p&gt;Go</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>gin</title>
    <link href="https://bubbleboy11.github.io/2021/07/19/gin/"/>
    <id>https://bubbleboy11.github.io/2021/07/19/gin/</id>
    <published>2021-07-18T17:46:44.000Z</published>
    <updated>2021-07-10T11:32:17.795Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go闭包</title>
    <link href="https://bubbleboy11.github.io/2021/07/16/go-bi-bao/"/>
    <id>https://bubbleboy11.github.io/2021/07/16/go-bi-bao/</id>
    <published>2021-07-15T16:21:41.000Z</published>
    <updated>2021-07-15T15:19:15.374Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;匿名函数是一个”内联”语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必申明。&lt;/p&gt;
&lt;p&gt;闭包&lt;/p&gt;
&lt;p&gt;是引用了自由变量的函数，被引用的自由变量和函数一同存在，即使已经离开了自由变量的环境也不会被释放或者删除，在闭包中可以继续使用这个自由变量，因此，</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go作用域</title>
    <link href="https://bubbleboy11.github.io/2021/07/15/go-zuo-yong-yu/"/>
    <id>https://bubbleboy11.github.io/2021/07/15/go-zuo-yong-yu/</id>
    <published>2021-07-14T16:21:41.000Z</published>
    <updated>2021-07-15T10:22:23.819Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。&lt;/p&gt;
&lt;p&gt;变量的作用域由变量的定义位置决定，在不同位置定义的变量，它的作用域是不一样的。&lt;br&gt;作用域（Scope）为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go递归函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/14/go-di-gui-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/14/go-di-gui-han-shu/</id>
    <published>2021-07-13T16:21:41.000Z</published>
    <updated>2021-07-15T02:48:35.848Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;递归函数指的是在运行的过程中函数内部调用函数自身的函数，&lt;br&gt;从数学解题思路来说，递归就是把一个大问题拆分成多个小问题，再各个击破，在实际开发过程中，递归函数可以解决许多数学问题，&lt;/p&gt;
&lt;p&gt;递归函数</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>grpc</title>
    <link href="https://bubbleboy11.github.io/2021/07/12/grpc/"/>
    <id>https://bubbleboy11.github.io/2021/07/12/grpc/</id>
    <published>2021-07-11T16:21:41.000Z</published>
    <updated>2021-07-09T13:17:33.790Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;go语言的包以及编码规范 &lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go接口</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-kou/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-kou/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-19T02:37:59.872Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Go 语言的接口类型非常特别，它的作用和 Java 语言的接口一样，但是在形式上有很大的差别。概念的地位和java中接口的地位是不一样&lt;br&gt;Java 语言需要在类的定义上显式实现了某些接口，才可以说这个类具备了接口定义的能力。&lt;/p&gt;
&lt;p&gt;Go</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体标签</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-biao-qian/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-biao-qian/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-07T14:41:13.050Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;结构体的字段除了名字和类型外，还可以有一个可选的标签（tag）：&lt;br&gt;它是一个附属于字段的字符串，可以是文档或其他的重要标记。&lt;br&gt;比如在我们解析json或生成json文件时，常用到encoding/json包，它提供一些默认标签，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;c</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体通过内嵌结构体实现继承的效果</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-tong-guo-nei-qian-jie-gou-ti-shi-xian-ji-cheng-de-xiao-guo/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-tong-guo-nei-qian-jie-gou-ti-shi-xian-ji-cheng-de-xiao-guo/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-17T15:50:17.978Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;结构体作为一种变量它可以放进另外一个结构体作为另一个结构体字段的类型&lt;br&gt;这种内嵌结构体的形式在 Go</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go通过接口协议去理解sort的本质</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-tong-guo-jie-kou-xie-yi-qu-li-jie-sort-de-ben-zhi/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-tong-guo-jie-kou-xie-yi-qu-li-jie-sort-de-ben-zhi/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-09T07:09:55.222Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>RPC</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/rpc/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/rpc/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-11T02:51:39.305Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
       </summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的type</title>
    <link href="https://bubbleboy11.github.io/2021/07/07/go-de-type/"/>
    <id>https://bubbleboy11.github.io/2021/07/07/go-de-type/</id>
    <published>2021-07-06T16:21:41.000Z</published>
    <updated>2021-07-16T04:03:42.723Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ol&gt;
&lt;li&gt;给一个类型定义别名, 实际上为什么会有byte， 就是我为了强调我们现在处理的对象是字节类型&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体的参数传递和方法</title>
    <link href="https://bubbleboy11.github.io/2021/07/07/go-jie-gou-ti-de-can-shu-chuan-di-he-fang-fa/"/>
    <id>https://bubbleboy11.github.io/2021/07/07/go-jie-gou-ti-de-can-shu-chuan-di-he-fang-fa/</id>
    <published>2021-07-06T16:21:41.000Z</published>
    <updated>2021-07-17T07:52:28.734Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;变量赋值本质上是一次内存浅拷贝，&lt;br&gt;切片的赋值是拷贝了切片头，&lt;br&gt;字符串的赋值是拷贝了字符串的头部，&lt;br&gt;数组的赋值呢是直接拷贝整个数组。&lt;/p&gt;
&lt;h2 id=&quot;结构体的拷贝-值类型&quot;&gt;&lt;a href=&quot;#结构体的拷贝-值类型&quot;</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体的实例化和new函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/07/go-jie-gou-ti-de-shi-li-hua-he-new-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/07/go-jie-gou-ti-de-shi-li-hua-he-new-han-shu/</id>
    <published>2021-07-06T16:21:41.000Z</published>
    <updated>2021-07-17T01:09:39.474Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;定义struct go语言没有class这个概念 所以说对于很多人来说会少理解很多面向对象抽象的概念&lt;br&gt;go语言不支持面向对象，如果要想达到这个封装的效果 那么就一定要解决 1. 变量的封装 2.</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的defer</title>
    <link href="https://bubbleboy11.github.io/2021/07/06/go-de-defer/"/>
    <id>https://bubbleboy11.github.io/2021/07/06/go-de-defer/</id>
    <published>2021-07-05T16:21:41.000Z</published>
    <updated>2021-07-15T12:28:05.948Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在我们实际的开发过程中，我们经常去连接一个远程的数据库，或者说连接本地的数据库，在我们连接数据库之后呢，就会返回连接的句柄，这种情况我们就占用了这个资源，假如我们程序执行的时候还没来得及关键关闭这些资源的时候，我们的程序就崩溃了，但是对这个资源的占用还一种存在着，则其他程序</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go错误和异常panic和recove</title>
    <link href="https://bubbleboy11.github.io/2021/07/06/go-cuo-wu-he-yi-chang-panic-he-recove/"/>
    <id>https://bubbleboy11.github.io/2021/07/06/go-cuo-wu-he-yi-chang-panic-he-recove/</id>
    <published>2021-07-05T16:21:41.000Z</published>
    <updated>2021-07-15T07:45:33.230Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;错误和异常是两个不同的概念，非常容易混淆。很多程序员习惯将一切非正常情况都看做错误，而不区分错误和异常，即使程序中可能有异常抛出，也将异常及时捕获并转换成错误。从表面上看，一切皆错误的思路更简单，而异常的引入仅仅增加了额外的复杂度。&lt;br&gt;但事实并非如此。众所周知，Gola</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go匿名函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/06/go-ni-ming-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/06/go-ni-ming-han-shu/</id>
    <published>2021-07-05T16:21:41.000Z</published>
    <updated>2021-07-15T07:38:51.338Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在需要使用函数时再定义函数，匿名函数没有函数名只有函数体，函数可以作为一种类型被赋值给函数类型的变量，匿名函数也往往以变量方式传递，这与C语言的回调函数比较类似，不同的是，Go语言支持随时在代码里定义匿名函数。&lt;/p&gt;
&lt;p&gt;匿名函数是指不需要定义函数名的一种函数实现方式，</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/05/go-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/05/go-han-shu/</id>
    <published>2021-07-04T16:21:41.000Z</published>
    <updated>2021-07-15T15:57:07.049Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;函数&lt;br&gt;为了完成某个具体功能封装起来的功能的集合，构成了代码执行的逻辑结构，在Go语言中，函数的基本组成为：关键字</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/05/python-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/05/python-han-shu/</id>
    <published>2021-07-04T16:21:41.000Z</published>
    <updated>2021-07-15T02:42:32.169Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一个简单的计算器&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="python" scheme="https://bubbleboy11.github.io/categories/python/"/>
    
    
  </entry>
  
</feed>
