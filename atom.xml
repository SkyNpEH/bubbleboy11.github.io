<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>外心人D的博客</title>
  
  
  <link href="https://bubbleboy11.github.io/atom.xml" rel="self"/>
  
  <link href="https://bubbleboy11.github.io/"/>
  <updated>2021-10-18T03:48:23.429Z</updated>
  <id>https://bubbleboy11.github.io/</id>
  
  <author>
    <name>外心人D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://bubbleboy11.github.io/2021/10/18/protobuf/"/>
    <id>https://bubbleboy11.github.io/2021/10/18/protobuf/</id>
    <published>2021-10-18T03:45:29.402Z</published>
    <updated>2021-10-18T03:48:23.429Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bubbleboy11.github.io/2021/10/10/go-la-ji-hui-shou/"/>
    <id>https://bubbleboy11.github.io/2021/10/10/go-la-ji-hui-shou/</id>
    <published>2021-10-10T04:15:07.546Z</published>
    <updated>2021-10-14T13:54:59.065Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;第2章-Go内部机制&quot;&gt;&lt;a href=&quot;#第2章-Go内部机制&quot; class=&quot;headerlink&quot; title=&quot;第2章 Go内部机制&quot;&gt;&lt;/a&gt;第2章 Go内部机制&lt;/h1&gt;&lt;h2 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;p&gt;垃圾回收是释放掉那些不再使用的内存空间的过程.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows生成项目目录结构</title>
    <link href="https://bubbleboy11.github.io/2021/10/07/windows-sheng-cheng-xiang-mu-mu-lu-jie-gou/"/>
    <id>https://bubbleboy11.github.io/2021/10/07/windows-sheng-cheng-xiang-mu-mu-lu-jie-gou/</id>
    <published>2021-10-06T16:21:41.000Z</published>
    <updated>2021-10-06T04:29:39.879Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在需要生成项目结构的目录下，Shift+空白处鼠标点击右键–&amp;gt;在此处打开powershell窗口；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tree&lt;/code&gt;生成文件夹目录结构&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>grpc的go的rpc入门</title>
    <link href="https://bubbleboy11.github.io/2021/10/05/grpc-de-go-de-rpc-ru-men/"/>
    <id>https://bubbleboy11.github.io/2021/10/05/grpc-de-go-de-rpc-ru-men/</id>
    <published>2021-10-04T16:21:41.000Z</published>
    <updated>2021-10-19T10:29:04.419Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 进程的启动过程、调度循环和GPM</title>
    <link href="https://bubbleboy11.github.io/2021/10/02/go-bian-yi/"/>
    <id>https://bubbleboy11.github.io/2021/10/02/go-bian-yi/</id>
    <published>2021-10-01T16:21:41.000Z</published>
    <updated>2021-10-04T13:16:45.615Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;寻找-make-的实现&quot;&gt;&lt;a href=&quot;#寻找-make-的实现&quot; class=&quot;headerlink&quot; title=&quot;寻找 make 的实现&quot;&gt;&lt;/a&gt;寻找 make 的实现&lt;/h3&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 进程的启动过程、调度循环和GPM</title>
    <link href="https://bubbleboy11.github.io/2021/10/02/go-jin-cheng-de-qi-dong-guo-cheng-diao-du-xun-huan-he-gpm/"/>
    <id>https://bubbleboy11.github.io/2021/10/02/go-jin-cheng-de-qi-dong-guo-cheng-diao-du-xun-huan-he-gpm/</id>
    <published>2021-10-01T16:21:41.000Z</published>
    <updated>2021-10-06T07:48:24.669Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;基本实验环境准备&lt;br&gt;使用docker构建基础环境&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>RPC</title>
    <link href="https://bubbleboy11.github.io/2021/09/28/rpc/"/>
    <id>https://bubbleboy11.github.io/2021/09/28/rpc/</id>
    <published>2021-09-27T16:21:41.000Z</published>
    <updated>2021-10-18T08:36:24.442Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;RPC（Remote Procedure</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的Options 模式</title>
    <link href="https://bubbleboy11.github.io/2021/09/22/go-de-option-mo-shi/"/>
    <id>https://bubbleboy11.github.io/2021/09/22/go-de-option-mo-shi/</id>
    <published>2021-09-21T16:21:41.000Z</published>
    <updated>2021-09-21T14:23:58.165Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Options 模式&lt;br&gt;一般原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个 Option 类型，它是 func(*YourType) 的形式；&lt;/li&gt;
&lt;li&gt;在创建的方法那里，增加不定参数options…Option。内部遍历</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>微服务设计</title>
    <link href="https://bubbleboy11.github.io/2021/09/05/wei-fu-wu-she-ji/"/>
    <id>https://bubbleboy11.github.io/2021/09/05/wei-fu-wu-she-ji/</id>
    <published>2021-09-04T16:21:41.000Z</published>
    <updated>2021-09-04T13:11:11.372Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;API-Gateway&quot;&gt;&lt;a href=&quot;#API-Gateway&quot; class=&quot;headerlink&quot; title=&quot;API Gateway&quot;&gt;&lt;/a&gt;API Gateway&lt;/h2&gt;&lt;p&gt;我们进行了 SOA</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>微服务</title>
    <link href="https://bubbleboy11.github.io/2021/09/03/wei-fu-wu/"/>
    <id>https://bubbleboy11.github.io/2021/09/03/wei-fu-wu/</id>
    <published>2021-09-02T16:21:41.000Z</published>
    <updated>2021-09-09T00:57:35.876Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;微服务将单体应用系统拆分成多个分而治之的小应用,降低系统整体崩溃的风险性;同时也可根据这些小应用的不同需求调整实体机的性能&lt;/p&gt;
&lt;p&gt;微服务主要缺点是将系统复杂化,但对于本身就复杂的系统,微服务受益会很高  &lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的select</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/go-de-select/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/go-de-select/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-09-21T11:05:24.106Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;多路通道&quot;&gt;&lt;a href=&quot;#多路通道&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的context</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/go-de-context/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/go-de-context/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-09-21T11:44:35.917Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;监控&lt;/p&gt;
&lt;p&gt;法一：全局变量&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>web路由匹配原则</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/web-lu-you-pi-pei-yuan-ze/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/web-lu-you-pi-pei-yuan-ze/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-09-21T03:26:15.854Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ol&gt;
&lt;li&gt;用户注册了一个路由 /order/*&lt;/li&gt;
&lt;li&gt;用户又注册了一个路由 /order/order_sn&lt;br&gt;请求 /order/order_sn</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的atomic</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/go-de-atornic/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/go-de-atornic/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-09-21T12:03:11.126Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;atomic 包&lt;br&gt;方法分成这几类：&lt;br&gt;• AddXXX：操作一个数字类型，加上一个数字&lt;br&gt;• LoadXXX：读取一个值&lt;br&gt;• CompareAndSwapXXX：CAS 操作&lt;br&gt;• StoreXXX：写入一个值&lt;br&gt;•</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的goroutine</title>
    <link href="https://bubbleboy11.github.io/2021/08/20/go-de-goroutine/"/>
    <id>https://bubbleboy11.github.io/2021/08/20/go-de-goroutine/</id>
    <published>2021-08-19T16:21:41.000Z</published>
    <updated>2021-10-14T12:53:48.178Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;go的协程本质是系统的线程调用，而Python中的协程是eventloop模型实现，所以虽然都叫协程，但并不是一个东西&lt;/p&gt;
&lt;p&gt;场景一：&lt;br&gt;不允许后面的逻辑，必需要等前面的完成才能执行&lt;br&gt;场景二：&lt;br&gt;批量操作相同的信息，批量发送信息&lt;/p&gt;
&lt;p&gt;Goro</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的channel</title>
    <link href="https://bubbleboy11.github.io/2021/08/20/go-de-channel/"/>
    <id>https://bubbleboy11.github.io/2021/08/20/go-de-channel/</id>
    <published>2021-08-19T16:21:41.000Z</published>
    <updated>2021-10-14T13:21:26.065Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;协程都是独立运行的，他们之间没有通信。&lt;/p&gt;
&lt;p&gt;不同的并行协程之间交流的方式有两种，一种是通过共享变量，但是不建议这么做。&lt;br&gt;另一种是通过队列。Go 语言鼓励使用先入先出(FIFO)的队列的形式来交流，它单独为协程之间的队列数据交流定制了特殊的语法类型 ——</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go测试</title>
    <link href="https://bubbleboy11.github.io/2021/08/18/go-ce-shi/"/>
    <id>https://bubbleboy11.github.io/2021/08/18/go-ce-shi/</id>
    <published>2021-08-17T16:21:41.000Z</published>
    <updated>2021-10-19T13:42:30.631Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;少DEBUG，多Testing&lt;/p&gt;
&lt;h2 id=&quot;传统测试&quot;&gt;&lt;a href=&quot;#传统测试&quot; class=&quot;headerlink&quot; title=&quot;传统测试&quot;&gt;&lt;/a&gt;传统测试&lt;/h2&gt;&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go泛型</title>
    <link href="https://bubbleboy11.github.io/2021/08/17/go-fan-xing/"/>
    <id>https://bubbleboy11.github.io/2021/08/17/go-fan-xing/</id>
    <published>2021-08-16T16:21:41.000Z</published>
    <updated>2021-09-22T01:10:27.531Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;泛型有什么作用？&lt;br&gt;在使用Go没有泛型之前我们怎么实现针对多类型的逻辑实现的呢？有很多方法，比如说使用interface{}作为变量类型参数，在内部通过类型判断进入对应的处理逻辑；将类型转化为特定表现的鸭子类型，通过接口定义的方法实现逻辑整合；还有人专门编写了Go的函数</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://bubbleboy11.github.io/2021/08/07/leetcode/"/>
    <id>https://bubbleboy11.github.io/2021/08/07/leetcode/</id>
    <published>2021-08-06T16:21:41.000Z</published>
    <updated>2021-10-24T03:46:47.442Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;3-无重复字符的最长子串&quot;&gt;&lt;a href=&quot;#3-无重复字符的最长子串&quot; class=&quot;headerlink&quot; title=&quot;3. 无重复字符的最长子串&quot;&gt;&lt;/a&gt;3. 无重复字符的最长子串&lt;/h2&gt;&lt;p&gt;给定一个字符串 s ，请你找出其中不含有重复字符的</summary>
        
      
    
    
    
    <category term="数据结构与算法" scheme="https://bubbleboy11.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>go的tcp和udp</title>
    <link href="https://bubbleboy11.github.io/2021/07/27/go-de-tcp-he-udp/"/>
    <id>https://bubbleboy11.github.io/2021/07/27/go-de-tcp-he-udp/</id>
    <published>2021-07-26T16:21:41.000Z</published>
    <updated>2021-07-26T08:58:15.373Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;如何获取完整应用数据报文&quot;&gt;&lt;a href=&quot;#如何获取完整应用数据报文&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
</feed>
