<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>外心人D的博客</title>
  
  
  <link href="https://bubbleboy11.github.io/atom.xml" rel="self"/>
  
  <link href="https://bubbleboy11.github.io/"/>
  <updated>2021-08-28T02:38:24.557Z</updated>
  <id>https://bubbleboy11.github.io/</id>
  
  <author>
    <name>外心人D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go的select</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/go-de-select/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/go-de-select/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-08-28T02:38:24.557Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;多路通道&quot;&gt;&lt;a href=&quot;#多路通道&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的context</title>
    <link href="https://bubbleboy11.github.io/2021/08/23/go-de-context/"/>
    <id>https://bubbleboy11.github.io/2021/08/23/go-de-context/</id>
    <published>2021-08-22T16:21:41.000Z</published>
    <updated>2021-08-29T09:50:20.627Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;监控&lt;/p&gt;
&lt;p&gt;法一：全局变量&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go测试</title>
    <link href="https://bubbleboy11.github.io/2021/08/20/go-de-goroutine/"/>
    <id>https://bubbleboy11.github.io/2021/08/20/go-de-goroutine/</id>
    <published>2021-08-19T16:21:41.000Z</published>
    <updated>2021-08-26T02:05:18.242Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;简介&lt;br&gt;因为并发程序要考虑很多的细节，以保证对共享变量的正确访问，使得并发编程在很多情况下变得很复杂。&lt;br&gt;但是Go语言在开发并发时，是比较简洁的。它通过channel来传递数据。数据竞争这个问题在golang的设计上就进行了规避了。它提倡用通信的方式实现共享，而不要</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的channel</title>
    <link href="https://bubbleboy11.github.io/2021/08/20/go-de-channel/"/>
    <id>https://bubbleboy11.github.io/2021/08/20/go-de-channel/</id>
    <published>2021-08-19T16:21:41.000Z</published>
    <updated>2021-08-27T04:51:01.538Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;协程都是独立运行的，他们之间没有通信。&lt;/p&gt;
&lt;p&gt;不同的并行协程之间交流的方式有两种，一种是通过共享变量，但是不建议这么做。&lt;br&gt;另一种是通过队列。Go 语言鼓励使用先入先出(FIFO)的队列的形式来交流，它单独为协程之间的队列数据交流定制了特殊的语法类型 ——</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go测试</title>
    <link href="https://bubbleboy11.github.io/2021/08/18/go-ce-shi/"/>
    <id>https://bubbleboy11.github.io/2021/08/18/go-ce-shi/</id>
    <published>2021-08-17T16:21:41.000Z</published>
    <updated>2021-08-19T09:19:32.220Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;少DEBUG，多Testing&lt;/p&gt;
&lt;h2 id=&quot;传统测试&quot;&gt;&lt;a href=&quot;#传统测试&quot; class=&quot;headerlink&quot; title=&quot;传统测试&quot;&gt;&lt;/a&gt;传统测试&lt;/h2&gt;&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go的泛型</title>
    <link href="https://bubbleboy11.github.io/2021/08/17/fan-xing/"/>
    <id>https://bubbleboy11.github.io/2021/08/17/fan-xing/</id>
    <published>2021-08-16T16:21:41.000Z</published>
    <updated>2021-08-23T02:54:28.045Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;泛型有什么作用？&lt;br&gt;在使用Go没有泛型之前我们怎么实现针对多类型的逻辑实现的呢？有很多方法，比如说使用interface{}作为变量类型参数，在内部通过类型判断进入对应的处理逻辑；将类型转化为特定表现的鸭子类型，通过接口定义的方法实现逻辑整合；还有人专门编写了Go的函数</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="https://bubbleboy11.github.io/2021/08/07/wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
    <id>https://bubbleboy11.github.io/2021/08/07/wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</id>
    <published>2021-08-06T16:21:41.000Z</published>
    <updated>2021-08-19T04:25:02.749Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;无重复字符的最长子串&lt;br&gt;给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="数据结构与算法" scheme="https://bubbleboy11.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>go的tcp和udp</title>
    <link href="https://bubbleboy11.github.io/2021/07/27/go-de-tcp-he-udp/"/>
    <id>https://bubbleboy11.github.io/2021/07/27/go-de-tcp-he-udp/</id>
    <published>2021-07-26T16:21:41.000Z</published>
    <updated>2021-07-26T08:58:15.373Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;如何获取完整应用数据报文&quot;&gt;&lt;a href=&quot;#如何获取完整应用数据报文&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>OSI</title>
    <link href="https://bubbleboy11.github.io/2021/07/20/osi/"/>
    <id>https://bubbleboy11.github.io/2021/07/20/osi/</id>
    <published>2021-07-19T16:21:41.000Z</published>
    <updated>2021-07-27T11:41:04.266Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;网络协议分层&lt;/p&gt;
&lt;p&gt;osi Open System Interconnection Reference Model&lt;br&gt;开放式系统互联通信参考模型&lt;/p&gt;
&lt;p&gt;高层：负责主机之间的数据传输&lt;br&gt;底层：负责网络数据传输&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    <category term="计算机网络" scheme="https://bubbleboy11.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>go的http</title>
    <link href="https://bubbleboy11.github.io/2021/07/20/go-de-http/"/>
    <id>https://bubbleboy11.github.io/2021/07/20/go-de-http/</id>
    <published>2021-07-19T16:21:41.000Z</published>
    <updated>2021-08-15T10:04:54.155Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Web是基于http协议的一个服务，&lt;br&gt;Go语言里面提供了一个完善的net/http包，通过http包可以很方便的搭建起来一个可以运行的Web服务。&lt;br&gt;同时使用这个包能很简单地对Web的路由，静态文件，模版，cookie等数据进行设置和操作。&lt;/p&gt;
&lt;p&gt;阅读源代</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go包管理</title>
    <link href="https://bubbleboy11.github.io/2021/07/20/go-bao-guan-li/"/>
    <id>https://bubbleboy11.github.io/2021/07/20/go-bao-guan-li/</id>
    <published>2021-07-19T16:21:41.000Z</published>
    <updated>2021-08-08T02:45:22.777Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;包管理 1.12之前 go的没有包管理 python java maven go modules&lt;/p&gt;
&lt;p&gt;包package：工程项目当中根据不同工作模块建立的不同的文件夹&lt;/p&gt;
&lt;p&gt;Go</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>gin</title>
    <link href="https://bubbleboy11.github.io/2021/07/19/gin/"/>
    <id>https://bubbleboy11.github.io/2021/07/19/gin/</id>
    <published>2021-07-18T17:46:44.000Z</published>
    <updated>2021-07-10T11:32:17.795Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go闭包</title>
    <link href="https://bubbleboy11.github.io/2021/07/16/go-bi-bao/"/>
    <id>https://bubbleboy11.github.io/2021/07/16/go-bi-bao/</id>
    <published>2021-07-15T16:21:41.000Z</published>
    <updated>2021-08-14T01:22:00.849Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;闭包是一个函数，是函数与函数外部数据的引用（在函数体内部引用到了函数体外部的数据），被引用的自由变量和函数一同存在，即使已经离开了自由变量的环境也不会被释放或者删除，在闭包中可以继续使用这个自由变量，&lt;br&gt;&lt;strong&gt;匿名函数 + 自由变量的引用环境 =</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go作用域</title>
    <link href="https://bubbleboy11.github.io/2021/07/15/go-zuo-yong-yu/"/>
    <id>https://bubbleboy11.github.io/2021/07/15/go-zuo-yong-yu/</id>
    <published>2021-07-14T16:21:41.000Z</published>
    <updated>2021-07-15T10:22:23.819Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。&lt;/p&gt;
&lt;p&gt;变量的作用域由变量的定义位置决定，在不同位置定义的变量，它的作用域是不一样的。&lt;br&gt;作用域（Scope）为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go递归函数</title>
    <link href="https://bubbleboy11.github.io/2021/07/14/go-di-gui-han-shu/"/>
    <id>https://bubbleboy11.github.io/2021/07/14/go-di-gui-han-shu/</id>
    <published>2021-07-13T16:21:41.000Z</published>
    <updated>2021-08-14T01:11:12.657Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;递归函数指的是在运行的过程中函数内部调用函数自身的函数，&lt;br&gt;从数学解题思路来说，递归就是把一个大问题拆分成多个小问题，再各个击破，在实际开发过程中，递归函数可以解决许多数学问题，&lt;/p&gt;
&lt;p&gt;递归函数</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>grpc</title>
    <link href="https://bubbleboy11.github.io/2021/07/12/grpc/"/>
    <id>https://bubbleboy11.github.io/2021/07/12/grpc/</id>
    <published>2021-07-11T16:21:41.000Z</published>
    <updated>2021-07-09T13:17:33.790Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;go语言的包以及编码规范 &lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go接口</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-kou/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-kou/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-08-14T12:16:59.476Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Go 语言的接口类型非常特别，它的作用和 Java 语言的接口一样，但是在形式上有很大的差别。概念的地位和java中接口的地位是不一样&lt;br&gt;Java</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体标签</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-biao-qian/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-biao-qian/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-07T14:41:13.050Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;结构体的字段除了名字和类型外，还可以有一个可选的标签（tag）：&lt;br&gt;它是一个附属于字段的字符串，可以是文档或其他的重要标记。&lt;br&gt;比如在我们解析json或生成json文件时，常用到encoding/json包，它提供一些默认标签，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;c</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go结构体通过内嵌结构体实现继承的效果</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-tong-guo-nei-qian-jie-gou-ti-shi-xian-ji-cheng-de-xiao-guo/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-jie-gou-ti-tong-guo-nei-qian-jie-gou-ti-shi-xian-ji-cheng-de-xiao-guo/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-08-09T02:32:19.157Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;结构体作为一种变量它可以放进另外一个结构体作为另一个结构体字段的类型&lt;br&gt;这种内嵌结构体的形式在 Go</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>go通过接口协议去理解sort的本质</title>
    <link href="https://bubbleboy11.github.io/2021/07/08/go-tong-guo-jie-kou-xie-yi-qu-li-jie-sort-de-ben-zhi/"/>
    <id>https://bubbleboy11.github.io/2021/07/08/go-tong-guo-jie-kou-xie-yi-qu-li-jie-sort-de-ben-zhi/</id>
    <published>2021-07-07T16:21:41.000Z</published>
    <updated>2021-07-09T07:09:55.222Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="go" scheme="https://bubbleboy11.github.io/categories/go/"/>
    
    
  </entry>
  
</feed>
